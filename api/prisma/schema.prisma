generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USTimezone {
  EST  // Eastern Standard Time
  CST  // Central Standard Time
  MST  // Mountain Standard Time
  PST  // Pacific Standard Time
  AKST // Alaska Standard Time
  HST  // Hawaii Standard Time
  AST  // Atlantic Standard Time
}

enum MentorshipStyle {
  FRIENDLY     // Casual, approachable mentorship
  PROFESSIONAL // Formal, career-focused mentorship
  PEER         // Collaborative, equal-level mentorship
}


model User {
  id    String @id @default(uuid()) @db.Uuid
  email String @unique
  name  String
  role      String?
  department String?
  level     String?
  age   Int?

  timezone USTimezone?
// career goals

  // Social and networking preferences
  isLookingForMentorship Boolean @default(true)
  isOpenToMentoring      Boolean @default(true)
  networkingGoals      String[] // "make friends", "build connections", "get advice"

  //Slack data
  slackID   String?
  slackName String?
  slackObj  Json?

  //Metadata

  matchLinks       MatchParticipant[]
  authoredFeedback Feedback[]         @relation("FeedbackAuthor")
  receivedFeedback Feedback[]         @relation("FeedbackSubject")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User preferences
  interests   String?
  goals       String?
  values      String?
  careerPersonalGoals   String?
  skillDevelopmentAreas      String?
  motivators            String?


  // mentorship:
  desiredStyle          MentorshipStyle?
  skills       String?
  areasForExposure      String?
  dealBreakers          String?
}

model Match {
  id String @id @default(uuid()) @db.Uuid

  reason MatchReason
  status Status

  participants MatchParticipant[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Feedback  Feedback[]
}

enum MatchReason {
  INTERESTS
  CAREER_GOALS
  MENTORSHIP
}

enum Status {
  SUGGESTED
  ACCEPTED
  REJECTED
}

model MatchParticipant {
  matchId String @db.Uuid
  userId  String @db.Uuid

  createdAt DateTime @default(now())

  match Match @relation(fields: [matchId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@id([userId, matchId])
}

model Feedback {
  id     String @id @default(uuid()) @db.Uuid
  user   User   @relation("FeedbackAuthor", fields: [userId], references: [id])
  userId String @db.Uuid

  matchedUser   User   @relation("FeedbackSubject", fields: [matchedUserId], references: [id])
  matchedUserId String @db.Uuid

  matchId String @db.Uuid
  match   Match  @relation(fields: [matchId], references: [id])

  reason  MatchReason
  rating  Int
  comment String?

  createdAt DateTime @default(now())
}
